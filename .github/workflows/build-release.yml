name: FlameCord Build (master)

on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # The corresponding tests are performed in the versions
    # marked as Long Term Support by Oracle and in its
    # latest version up to the moment.
    strategy:
      matrix:
        java: [8, 11, 17]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
      
    - name: Update Submodules
      run: |
        git submodule sync
        git submodule update --init --recursive
        
    - name: Setup JAVA ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java }}
        distribution: 'adopt'
        architecture: x64
    
    # The corresponding dependencies are stored in the cache to speed up the test.
    - name: Cache Maven Packages
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build FlameCord
      run: |
        git config --global user.email "you@example.com"
        git config --global user.name "Your Name"
        ./flamecord build
      
    # An artifact is generated in a compressed file according to each JDK build version.
    - name: Upload FlameCord
      uses: actions/upload-artifact@v2
      with:
        name: FlameCord-JDK${{ matrix.java }}
        path: FlameCord-Proxy/bootstrap/target/FlameCord.jar
    
    # Release FlameCord
    - name: Release FlameCord
      uses: softprops/action-gh-release@v1
      with: 
        token: ${{ secrets.RELEASE_KEY }}
        files: |
          FlameCord-Proxy/bootstrap/target/FlameCord-JDK${{ matrix.java }}.jar
        tag_name: commit-${{ github.sha }}
        name: FlameCord Automation Compile ${{ github.sha }}
        body: |
          Commit ${{ github.sha }}
          This is an automated release, it has not been tested yet.
          This release will trigger whenever a Git push happens to the project.
          It will also upload an artifact. But artifacts require a GitHub account.
        generate_release_notes: true
      env:
        GITHUB_REPOSITORY: MediumCraft/FlameCord
